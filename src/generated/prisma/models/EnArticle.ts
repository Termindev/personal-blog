
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EnArticle` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EnArticle
 * 
 */
export type EnArticleModel = runtime.Types.Result.DefaultSelection<Prisma.$EnArticlePayload>

export type AggregateEnArticle = {
  _count: EnArticleCountAggregateOutputType | null
  _min: EnArticleMinAggregateOutputType | null
  _max: EnArticleMaxAggregateOutputType | null
}

export type EnArticleMinAggregateOutputType = {
  id: string | null
  title: string | null
  desc: string | null
  content: string | null
  publish_date: Date | null
}

export type EnArticleMaxAggregateOutputType = {
  id: string | null
  title: string | null
  desc: string | null
  content: string | null
  publish_date: Date | null
}

export type EnArticleCountAggregateOutputType = {
  id: number
  title: number
  desc: number
  content: number
  publish_date: number
  _all: number
}


export type EnArticleMinAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
}

export type EnArticleMaxAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
}

export type EnArticleCountAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
  _all?: true
}

export type EnArticleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EnArticle to aggregate.
   */
  where?: Prisma.EnArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnArticles to fetch.
   */
  orderBy?: Prisma.EnArticleOrderByWithRelationInput | Prisma.EnArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EnArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EnArticles
  **/
  _count?: true | EnArticleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EnArticleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EnArticleMaxAggregateInputType
}

export type GetEnArticleAggregateType<T extends EnArticleAggregateArgs> = {
      [P in keyof T & keyof AggregateEnArticle]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEnArticle[P]>
    : Prisma.GetScalarType<T[P], AggregateEnArticle[P]>
}




export type EnArticleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnArticleWhereInput
  orderBy?: Prisma.EnArticleOrderByWithAggregationInput | Prisma.EnArticleOrderByWithAggregationInput[]
  by: Prisma.EnArticleScalarFieldEnum[] | Prisma.EnArticleScalarFieldEnum
  having?: Prisma.EnArticleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EnArticleCountAggregateInputType | true
  _min?: EnArticleMinAggregateInputType
  _max?: EnArticleMaxAggregateInputType
}

export type EnArticleGroupByOutputType = {
  id: string
  title: string
  desc: string
  content: string
  publish_date: Date
  _count: EnArticleCountAggregateOutputType | null
  _min: EnArticleMinAggregateOutputType | null
  _max: EnArticleMaxAggregateOutputType | null
}

type GetEnArticleGroupByPayload<T extends EnArticleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EnArticleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EnArticleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EnArticleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EnArticleGroupByOutputType[P]>
      }
    >
  > 



export type EnArticleWhereInput = {
  AND?: Prisma.EnArticleWhereInput | Prisma.EnArticleWhereInput[]
  OR?: Prisma.EnArticleWhereInput[]
  NOT?: Prisma.EnArticleWhereInput | Prisma.EnArticleWhereInput[]
  id?: Prisma.StringFilter<"EnArticle"> | string
  title?: Prisma.StringFilter<"EnArticle"> | string
  desc?: Prisma.StringFilter<"EnArticle"> | string
  content?: Prisma.StringFilter<"EnArticle"> | string
  publish_date?: Prisma.DateTimeFilter<"EnArticle"> | Date | string
}

export type EnArticleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type EnArticleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EnArticleWhereInput | Prisma.EnArticleWhereInput[]
  OR?: Prisma.EnArticleWhereInput[]
  NOT?: Prisma.EnArticleWhereInput | Prisma.EnArticleWhereInput[]
  title?: Prisma.StringFilter<"EnArticle"> | string
  desc?: Prisma.StringFilter<"EnArticle"> | string
  content?: Prisma.StringFilter<"EnArticle"> | string
  publish_date?: Prisma.DateTimeFilter<"EnArticle"> | Date | string
}, "id">

export type EnArticleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
  _count?: Prisma.EnArticleCountOrderByAggregateInput
  _max?: Prisma.EnArticleMaxOrderByAggregateInput
  _min?: Prisma.EnArticleMinOrderByAggregateInput
}

export type EnArticleScalarWhereWithAggregatesInput = {
  AND?: Prisma.EnArticleScalarWhereWithAggregatesInput | Prisma.EnArticleScalarWhereWithAggregatesInput[]
  OR?: Prisma.EnArticleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EnArticleScalarWhereWithAggregatesInput | Prisma.EnArticleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EnArticle"> | string
  title?: Prisma.StringWithAggregatesFilter<"EnArticle"> | string
  desc?: Prisma.StringWithAggregatesFilter<"EnArticle"> | string
  content?: Prisma.StringWithAggregatesFilter<"EnArticle"> | string
  publish_date?: Prisma.DateTimeWithAggregatesFilter<"EnArticle"> | Date | string
}

export type EnArticleCreateInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type EnArticleUncheckedCreateInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type EnArticleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EnArticleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EnArticleCreateManyInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type EnArticleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EnArticleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EnArticleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type EnArticleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type EnArticleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type EnArticleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["enArticle"]>

export type EnArticleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["enArticle"]>

export type EnArticleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["enArticle"]>

export type EnArticleSelectScalar = {
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}

export type EnArticleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "desc" | "content" | "publish_date", ExtArgs["result"]["enArticle"]>

export type $EnArticlePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EnArticle"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    desc: string
    content: string
    publish_date: Date
  }, ExtArgs["result"]["enArticle"]>
  composites: {}
}

export type EnArticleGetPayload<S extends boolean | null | undefined | EnArticleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EnArticlePayload, S>

export type EnArticleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EnArticleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EnArticleCountAggregateInputType | true
  }

export interface EnArticleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EnArticle'], meta: { name: 'EnArticle' } }
  /**
   * Find zero or one EnArticle that matches the filter.
   * @param {EnArticleFindUniqueArgs} args - Arguments to find a EnArticle
   * @example
   * // Get one EnArticle
   * const enArticle = await prisma.enArticle.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EnArticleFindUniqueArgs>(args: Prisma.SelectSubset<T, EnArticleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EnArticleClient<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EnArticle that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EnArticleFindUniqueOrThrowArgs} args - Arguments to find a EnArticle
   * @example
   * // Get one EnArticle
   * const enArticle = await prisma.enArticle.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EnArticleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EnArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EnArticleClient<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EnArticle that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnArticleFindFirstArgs} args - Arguments to find a EnArticle
   * @example
   * // Get one EnArticle
   * const enArticle = await prisma.enArticle.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EnArticleFindFirstArgs>(args?: Prisma.SelectSubset<T, EnArticleFindFirstArgs<ExtArgs>>): Prisma.Prisma__EnArticleClient<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EnArticle that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnArticleFindFirstOrThrowArgs} args - Arguments to find a EnArticle
   * @example
   * // Get one EnArticle
   * const enArticle = await prisma.enArticle.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EnArticleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EnArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EnArticleClient<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EnArticles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnArticleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EnArticles
   * const enArticles = await prisma.enArticle.findMany()
   * 
   * // Get first 10 EnArticles
   * const enArticles = await prisma.enArticle.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const enArticleWithIdOnly = await prisma.enArticle.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EnArticleFindManyArgs>(args?: Prisma.SelectSubset<T, EnArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EnArticle.
   * @param {EnArticleCreateArgs} args - Arguments to create a EnArticle.
   * @example
   * // Create one EnArticle
   * const EnArticle = await prisma.enArticle.create({
   *   data: {
   *     // ... data to create a EnArticle
   *   }
   * })
   * 
   */
  create<T extends EnArticleCreateArgs>(args: Prisma.SelectSubset<T, EnArticleCreateArgs<ExtArgs>>): Prisma.Prisma__EnArticleClient<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EnArticles.
   * @param {EnArticleCreateManyArgs} args - Arguments to create many EnArticles.
   * @example
   * // Create many EnArticles
   * const enArticle = await prisma.enArticle.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EnArticleCreateManyArgs>(args?: Prisma.SelectSubset<T, EnArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EnArticles and returns the data saved in the database.
   * @param {EnArticleCreateManyAndReturnArgs} args - Arguments to create many EnArticles.
   * @example
   * // Create many EnArticles
   * const enArticle = await prisma.enArticle.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EnArticles and only return the `id`
   * const enArticleWithIdOnly = await prisma.enArticle.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EnArticleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EnArticleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EnArticle.
   * @param {EnArticleDeleteArgs} args - Arguments to delete one EnArticle.
   * @example
   * // Delete one EnArticle
   * const EnArticle = await prisma.enArticle.delete({
   *   where: {
   *     // ... filter to delete one EnArticle
   *   }
   * })
   * 
   */
  delete<T extends EnArticleDeleteArgs>(args: Prisma.SelectSubset<T, EnArticleDeleteArgs<ExtArgs>>): Prisma.Prisma__EnArticleClient<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EnArticle.
   * @param {EnArticleUpdateArgs} args - Arguments to update one EnArticle.
   * @example
   * // Update one EnArticle
   * const enArticle = await prisma.enArticle.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EnArticleUpdateArgs>(args: Prisma.SelectSubset<T, EnArticleUpdateArgs<ExtArgs>>): Prisma.Prisma__EnArticleClient<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EnArticles.
   * @param {EnArticleDeleteManyArgs} args - Arguments to filter EnArticles to delete.
   * @example
   * // Delete a few EnArticles
   * const { count } = await prisma.enArticle.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EnArticleDeleteManyArgs>(args?: Prisma.SelectSubset<T, EnArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EnArticles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnArticleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EnArticles
   * const enArticle = await prisma.enArticle.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EnArticleUpdateManyArgs>(args: Prisma.SelectSubset<T, EnArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EnArticles and returns the data updated in the database.
   * @param {EnArticleUpdateManyAndReturnArgs} args - Arguments to update many EnArticles.
   * @example
   * // Update many EnArticles
   * const enArticle = await prisma.enArticle.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EnArticles and only return the `id`
   * const enArticleWithIdOnly = await prisma.enArticle.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EnArticleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EnArticleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EnArticle.
   * @param {EnArticleUpsertArgs} args - Arguments to update or create a EnArticle.
   * @example
   * // Update or create a EnArticle
   * const enArticle = await prisma.enArticle.upsert({
   *   create: {
   *     // ... data to create a EnArticle
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EnArticle we want to update
   *   }
   * })
   */
  upsert<T extends EnArticleUpsertArgs>(args: Prisma.SelectSubset<T, EnArticleUpsertArgs<ExtArgs>>): Prisma.Prisma__EnArticleClient<runtime.Types.Result.GetResult<Prisma.$EnArticlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EnArticles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnArticleCountArgs} args - Arguments to filter EnArticles to count.
   * @example
   * // Count the number of EnArticles
   * const count = await prisma.enArticle.count({
   *   where: {
   *     // ... the filter for the EnArticles we want to count
   *   }
   * })
  **/
  count<T extends EnArticleCountArgs>(
    args?: Prisma.Subset<T, EnArticleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EnArticleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EnArticle.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EnArticleAggregateArgs>(args: Prisma.Subset<T, EnArticleAggregateArgs>): Prisma.PrismaPromise<GetEnArticleAggregateType<T>>

  /**
   * Group by EnArticle.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EnArticleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EnArticleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EnArticleGroupByArgs['orderBy'] }
      : { orderBy?: EnArticleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EnArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EnArticle model
 */
readonly fields: EnArticleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EnArticle.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EnArticleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EnArticle model
 */
export interface EnArticleFieldRefs {
  readonly id: Prisma.FieldRef<"EnArticle", 'String'>
  readonly title: Prisma.FieldRef<"EnArticle", 'String'>
  readonly desc: Prisma.FieldRef<"EnArticle", 'String'>
  readonly content: Prisma.FieldRef<"EnArticle", 'String'>
  readonly publish_date: Prisma.FieldRef<"EnArticle", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EnArticle findUnique
 */
export type EnArticleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * Filter, which EnArticle to fetch.
   */
  where: Prisma.EnArticleWhereUniqueInput
}

/**
 * EnArticle findUniqueOrThrow
 */
export type EnArticleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * Filter, which EnArticle to fetch.
   */
  where: Prisma.EnArticleWhereUniqueInput
}

/**
 * EnArticle findFirst
 */
export type EnArticleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * Filter, which EnArticle to fetch.
   */
  where?: Prisma.EnArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnArticles to fetch.
   */
  orderBy?: Prisma.EnArticleOrderByWithRelationInput | Prisma.EnArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EnArticles.
   */
  cursor?: Prisma.EnArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EnArticles.
   */
  distinct?: Prisma.EnArticleScalarFieldEnum | Prisma.EnArticleScalarFieldEnum[]
}

/**
 * EnArticle findFirstOrThrow
 */
export type EnArticleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * Filter, which EnArticle to fetch.
   */
  where?: Prisma.EnArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnArticles to fetch.
   */
  orderBy?: Prisma.EnArticleOrderByWithRelationInput | Prisma.EnArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EnArticles.
   */
  cursor?: Prisma.EnArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EnArticles.
   */
  distinct?: Prisma.EnArticleScalarFieldEnum | Prisma.EnArticleScalarFieldEnum[]
}

/**
 * EnArticle findMany
 */
export type EnArticleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * Filter, which EnArticles to fetch.
   */
  where?: Prisma.EnArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EnArticles to fetch.
   */
  orderBy?: Prisma.EnArticleOrderByWithRelationInput | Prisma.EnArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EnArticles.
   */
  cursor?: Prisma.EnArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EnArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EnArticles.
   */
  skip?: number
  distinct?: Prisma.EnArticleScalarFieldEnum | Prisma.EnArticleScalarFieldEnum[]
}

/**
 * EnArticle create
 */
export type EnArticleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * The data needed to create a EnArticle.
   */
  data: Prisma.XOR<Prisma.EnArticleCreateInput, Prisma.EnArticleUncheckedCreateInput>
}

/**
 * EnArticle createMany
 */
export type EnArticleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EnArticles.
   */
  data: Prisma.EnArticleCreateManyInput | Prisma.EnArticleCreateManyInput[]
}

/**
 * EnArticle createManyAndReturn
 */
export type EnArticleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * The data used to create many EnArticles.
   */
  data: Prisma.EnArticleCreateManyInput | Prisma.EnArticleCreateManyInput[]
}

/**
 * EnArticle update
 */
export type EnArticleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * The data needed to update a EnArticle.
   */
  data: Prisma.XOR<Prisma.EnArticleUpdateInput, Prisma.EnArticleUncheckedUpdateInput>
  /**
   * Choose, which EnArticle to update.
   */
  where: Prisma.EnArticleWhereUniqueInput
}

/**
 * EnArticle updateMany
 */
export type EnArticleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EnArticles.
   */
  data: Prisma.XOR<Prisma.EnArticleUpdateManyMutationInput, Prisma.EnArticleUncheckedUpdateManyInput>
  /**
   * Filter which EnArticles to update
   */
  where?: Prisma.EnArticleWhereInput
  /**
   * Limit how many EnArticles to update.
   */
  limit?: number
}

/**
 * EnArticle updateManyAndReturn
 */
export type EnArticleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * The data used to update EnArticles.
   */
  data: Prisma.XOR<Prisma.EnArticleUpdateManyMutationInput, Prisma.EnArticleUncheckedUpdateManyInput>
  /**
   * Filter which EnArticles to update
   */
  where?: Prisma.EnArticleWhereInput
  /**
   * Limit how many EnArticles to update.
   */
  limit?: number
}

/**
 * EnArticle upsert
 */
export type EnArticleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * The filter to search for the EnArticle to update in case it exists.
   */
  where: Prisma.EnArticleWhereUniqueInput
  /**
   * In case the EnArticle found by the `where` argument doesn't exist, create a new EnArticle with this data.
   */
  create: Prisma.XOR<Prisma.EnArticleCreateInput, Prisma.EnArticleUncheckedCreateInput>
  /**
   * In case the EnArticle was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EnArticleUpdateInput, Prisma.EnArticleUncheckedUpdateInput>
}

/**
 * EnArticle delete
 */
export type EnArticleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
  /**
   * Filter which EnArticle to delete.
   */
  where: Prisma.EnArticleWhereUniqueInput
}

/**
 * EnArticle deleteMany
 */
export type EnArticleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EnArticles to delete
   */
  where?: Prisma.EnArticleWhereInput
  /**
   * Limit how many EnArticles to delete.
   */
  limit?: number
}

/**
 * EnArticle without action
 */
export type EnArticleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EnArticle
   */
  select?: Prisma.EnArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EnArticle
   */
  omit?: Prisma.EnArticleOmit<ExtArgs> | null
}
