
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ArArticle` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ArArticle
 * 
 */
export type ArArticleModel = runtime.Types.Result.DefaultSelection<Prisma.$ArArticlePayload>

export type AggregateArArticle = {
  _count: ArArticleCountAggregateOutputType | null
  _min: ArArticleMinAggregateOutputType | null
  _max: ArArticleMaxAggregateOutputType | null
}

export type ArArticleMinAggregateOutputType = {
  id: string | null
  title: string | null
  desc: string | null
  content: string | null
  publish_date: Date | null
}

export type ArArticleMaxAggregateOutputType = {
  id: string | null
  title: string | null
  desc: string | null
  content: string | null
  publish_date: Date | null
}

export type ArArticleCountAggregateOutputType = {
  id: number
  title: number
  desc: number
  content: number
  publish_date: number
  _all: number
}


export type ArArticleMinAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
}

export type ArArticleMaxAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
}

export type ArArticleCountAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
  _all?: true
}

export type ArArticleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ArArticle to aggregate.
   */
  where?: Prisma.ArArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ArArticles to fetch.
   */
  orderBy?: Prisma.ArArticleOrderByWithRelationInput | Prisma.ArArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ArArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ArArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ArArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ArArticles
  **/
  _count?: true | ArArticleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ArArticleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ArArticleMaxAggregateInputType
}

export type GetArArticleAggregateType<T extends ArArticleAggregateArgs> = {
      [P in keyof T & keyof AggregateArArticle]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateArArticle[P]>
    : Prisma.GetScalarType<T[P], AggregateArArticle[P]>
}




export type ArArticleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ArArticleWhereInput
  orderBy?: Prisma.ArArticleOrderByWithAggregationInput | Prisma.ArArticleOrderByWithAggregationInput[]
  by: Prisma.ArArticleScalarFieldEnum[] | Prisma.ArArticleScalarFieldEnum
  having?: Prisma.ArArticleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ArArticleCountAggregateInputType | true
  _min?: ArArticleMinAggregateInputType
  _max?: ArArticleMaxAggregateInputType
}

export type ArArticleGroupByOutputType = {
  id: string
  title: string
  desc: string
  content: string
  publish_date: Date
  _count: ArArticleCountAggregateOutputType | null
  _min: ArArticleMinAggregateOutputType | null
  _max: ArArticleMaxAggregateOutputType | null
}

type GetArArticleGroupByPayload<T extends ArArticleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ArArticleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ArArticleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ArArticleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ArArticleGroupByOutputType[P]>
      }
    >
  > 



export type ArArticleWhereInput = {
  AND?: Prisma.ArArticleWhereInput | Prisma.ArArticleWhereInput[]
  OR?: Prisma.ArArticleWhereInput[]
  NOT?: Prisma.ArArticleWhereInput | Prisma.ArArticleWhereInput[]
  id?: Prisma.StringFilter<"ArArticle"> | string
  title?: Prisma.StringFilter<"ArArticle"> | string
  desc?: Prisma.StringFilter<"ArArticle"> | string
  content?: Prisma.StringFilter<"ArArticle"> | string
  publish_date?: Prisma.DateTimeFilter<"ArArticle"> | Date | string
}

export type ArArticleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type ArArticleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ArArticleWhereInput | Prisma.ArArticleWhereInput[]
  OR?: Prisma.ArArticleWhereInput[]
  NOT?: Prisma.ArArticleWhereInput | Prisma.ArArticleWhereInput[]
  title?: Prisma.StringFilter<"ArArticle"> | string
  desc?: Prisma.StringFilter<"ArArticle"> | string
  content?: Prisma.StringFilter<"ArArticle"> | string
  publish_date?: Prisma.DateTimeFilter<"ArArticle"> | Date | string
}, "id">

export type ArArticleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
  _count?: Prisma.ArArticleCountOrderByAggregateInput
  _max?: Prisma.ArArticleMaxOrderByAggregateInput
  _min?: Prisma.ArArticleMinOrderByAggregateInput
}

export type ArArticleScalarWhereWithAggregatesInput = {
  AND?: Prisma.ArArticleScalarWhereWithAggregatesInput | Prisma.ArArticleScalarWhereWithAggregatesInput[]
  OR?: Prisma.ArArticleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ArArticleScalarWhereWithAggregatesInput | Prisma.ArArticleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ArArticle"> | string
  title?: Prisma.StringWithAggregatesFilter<"ArArticle"> | string
  desc?: Prisma.StringWithAggregatesFilter<"ArArticle"> | string
  content?: Prisma.StringWithAggregatesFilter<"ArArticle"> | string
  publish_date?: Prisma.DateTimeWithAggregatesFilter<"ArArticle"> | Date | string
}

export type ArArticleCreateInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type ArArticleUncheckedCreateInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type ArArticleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ArArticleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ArArticleCreateManyInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type ArArticleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ArArticleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ArArticleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type ArArticleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type ArArticleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}



export type ArArticleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["arArticle"]>

export type ArArticleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["arArticle"]>

export type ArArticleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["arArticle"]>

export type ArArticleSelectScalar = {
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}

export type ArArticleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "desc" | "content" | "publish_date", ExtArgs["result"]["arArticle"]>

export type $ArArticlePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ArArticle"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    desc: string
    content: string
    publish_date: Date
  }, ExtArgs["result"]["arArticle"]>
  composites: {}
}

export type ArArticleGetPayload<S extends boolean | null | undefined | ArArticleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ArArticlePayload, S>

export type ArArticleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ArArticleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ArArticleCountAggregateInputType | true
  }

export interface ArArticleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArArticle'], meta: { name: 'ArArticle' } }
  /**
   * Find zero or one ArArticle that matches the filter.
   * @param {ArArticleFindUniqueArgs} args - Arguments to find a ArArticle
   * @example
   * // Get one ArArticle
   * const arArticle = await prisma.arArticle.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ArArticleFindUniqueArgs>(args: Prisma.SelectSubset<T, ArArticleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ArArticleClient<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ArArticle that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ArArticleFindUniqueOrThrowArgs} args - Arguments to find a ArArticle
   * @example
   * // Get one ArArticle
   * const arArticle = await prisma.arArticle.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ArArticleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ArArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ArArticleClient<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ArArticle that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArArticleFindFirstArgs} args - Arguments to find a ArArticle
   * @example
   * // Get one ArArticle
   * const arArticle = await prisma.arArticle.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ArArticleFindFirstArgs>(args?: Prisma.SelectSubset<T, ArArticleFindFirstArgs<ExtArgs>>): Prisma.Prisma__ArArticleClient<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ArArticle that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArArticleFindFirstOrThrowArgs} args - Arguments to find a ArArticle
   * @example
   * // Get one ArArticle
   * const arArticle = await prisma.arArticle.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ArArticleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ArArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ArArticleClient<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ArArticles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArArticleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ArArticles
   * const arArticles = await prisma.arArticle.findMany()
   * 
   * // Get first 10 ArArticles
   * const arArticles = await prisma.arArticle.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const arArticleWithIdOnly = await prisma.arArticle.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ArArticleFindManyArgs>(args?: Prisma.SelectSubset<T, ArArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ArArticle.
   * @param {ArArticleCreateArgs} args - Arguments to create a ArArticle.
   * @example
   * // Create one ArArticle
   * const ArArticle = await prisma.arArticle.create({
   *   data: {
   *     // ... data to create a ArArticle
   *   }
   * })
   * 
   */
  create<T extends ArArticleCreateArgs>(args: Prisma.SelectSubset<T, ArArticleCreateArgs<ExtArgs>>): Prisma.Prisma__ArArticleClient<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ArArticles.
   * @param {ArArticleCreateManyArgs} args - Arguments to create many ArArticles.
   * @example
   * // Create many ArArticles
   * const arArticle = await prisma.arArticle.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ArArticleCreateManyArgs>(args?: Prisma.SelectSubset<T, ArArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ArArticles and returns the data saved in the database.
   * @param {ArArticleCreateManyAndReturnArgs} args - Arguments to create many ArArticles.
   * @example
   * // Create many ArArticles
   * const arArticle = await prisma.arArticle.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ArArticles and only return the `id`
   * const arArticleWithIdOnly = await prisma.arArticle.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ArArticleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ArArticleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ArArticle.
   * @param {ArArticleDeleteArgs} args - Arguments to delete one ArArticle.
   * @example
   * // Delete one ArArticle
   * const ArArticle = await prisma.arArticle.delete({
   *   where: {
   *     // ... filter to delete one ArArticle
   *   }
   * })
   * 
   */
  delete<T extends ArArticleDeleteArgs>(args: Prisma.SelectSubset<T, ArArticleDeleteArgs<ExtArgs>>): Prisma.Prisma__ArArticleClient<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ArArticle.
   * @param {ArArticleUpdateArgs} args - Arguments to update one ArArticle.
   * @example
   * // Update one ArArticle
   * const arArticle = await prisma.arArticle.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ArArticleUpdateArgs>(args: Prisma.SelectSubset<T, ArArticleUpdateArgs<ExtArgs>>): Prisma.Prisma__ArArticleClient<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ArArticles.
   * @param {ArArticleDeleteManyArgs} args - Arguments to filter ArArticles to delete.
   * @example
   * // Delete a few ArArticles
   * const { count } = await prisma.arArticle.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ArArticleDeleteManyArgs>(args?: Prisma.SelectSubset<T, ArArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ArArticles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArArticleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ArArticles
   * const arArticle = await prisma.arArticle.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ArArticleUpdateManyArgs>(args: Prisma.SelectSubset<T, ArArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ArArticles and returns the data updated in the database.
   * @param {ArArticleUpdateManyAndReturnArgs} args - Arguments to update many ArArticles.
   * @example
   * // Update many ArArticles
   * const arArticle = await prisma.arArticle.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ArArticles and only return the `id`
   * const arArticleWithIdOnly = await prisma.arArticle.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ArArticleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ArArticleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ArArticle.
   * @param {ArArticleUpsertArgs} args - Arguments to update or create a ArArticle.
   * @example
   * // Update or create a ArArticle
   * const arArticle = await prisma.arArticle.upsert({
   *   create: {
   *     // ... data to create a ArArticle
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ArArticle we want to update
   *   }
   * })
   */
  upsert<T extends ArArticleUpsertArgs>(args: Prisma.SelectSubset<T, ArArticleUpsertArgs<ExtArgs>>): Prisma.Prisma__ArArticleClient<runtime.Types.Result.GetResult<Prisma.$ArArticlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ArArticles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArArticleCountArgs} args - Arguments to filter ArArticles to count.
   * @example
   * // Count the number of ArArticles
   * const count = await prisma.arArticle.count({
   *   where: {
   *     // ... the filter for the ArArticles we want to count
   *   }
   * })
  **/
  count<T extends ArArticleCountArgs>(
    args?: Prisma.Subset<T, ArArticleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ArArticleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ArArticle.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ArArticleAggregateArgs>(args: Prisma.Subset<T, ArArticleAggregateArgs>): Prisma.PrismaPromise<GetArArticleAggregateType<T>>

  /**
   * Group by ArArticle.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArArticleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ArArticleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ArArticleGroupByArgs['orderBy'] }
      : { orderBy?: ArArticleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ArArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ArArticle model
 */
readonly fields: ArArticleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ArArticle.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ArArticleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ArArticle model
 */
export interface ArArticleFieldRefs {
  readonly id: Prisma.FieldRef<"ArArticle", 'String'>
  readonly title: Prisma.FieldRef<"ArArticle", 'String'>
  readonly desc: Prisma.FieldRef<"ArArticle", 'String'>
  readonly content: Prisma.FieldRef<"ArArticle", 'String'>
  readonly publish_date: Prisma.FieldRef<"ArArticle", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ArArticle findUnique
 */
export type ArArticleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * Filter, which ArArticle to fetch.
   */
  where: Prisma.ArArticleWhereUniqueInput
}

/**
 * ArArticle findUniqueOrThrow
 */
export type ArArticleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * Filter, which ArArticle to fetch.
   */
  where: Prisma.ArArticleWhereUniqueInput
}

/**
 * ArArticle findFirst
 */
export type ArArticleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * Filter, which ArArticle to fetch.
   */
  where?: Prisma.ArArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ArArticles to fetch.
   */
  orderBy?: Prisma.ArArticleOrderByWithRelationInput | Prisma.ArArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ArArticles.
   */
  cursor?: Prisma.ArArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ArArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ArArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ArArticles.
   */
  distinct?: Prisma.ArArticleScalarFieldEnum | Prisma.ArArticleScalarFieldEnum[]
}

/**
 * ArArticle findFirstOrThrow
 */
export type ArArticleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * Filter, which ArArticle to fetch.
   */
  where?: Prisma.ArArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ArArticles to fetch.
   */
  orderBy?: Prisma.ArArticleOrderByWithRelationInput | Prisma.ArArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ArArticles.
   */
  cursor?: Prisma.ArArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ArArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ArArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ArArticles.
   */
  distinct?: Prisma.ArArticleScalarFieldEnum | Prisma.ArArticleScalarFieldEnum[]
}

/**
 * ArArticle findMany
 */
export type ArArticleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * Filter, which ArArticles to fetch.
   */
  where?: Prisma.ArArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ArArticles to fetch.
   */
  orderBy?: Prisma.ArArticleOrderByWithRelationInput | Prisma.ArArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ArArticles.
   */
  cursor?: Prisma.ArArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ArArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ArArticles.
   */
  skip?: number
  distinct?: Prisma.ArArticleScalarFieldEnum | Prisma.ArArticleScalarFieldEnum[]
}

/**
 * ArArticle create
 */
export type ArArticleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * The data needed to create a ArArticle.
   */
  data: Prisma.XOR<Prisma.ArArticleCreateInput, Prisma.ArArticleUncheckedCreateInput>
}

/**
 * ArArticle createMany
 */
export type ArArticleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ArArticles.
   */
  data: Prisma.ArArticleCreateManyInput | Prisma.ArArticleCreateManyInput[]
}

/**
 * ArArticle createManyAndReturn
 */
export type ArArticleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * The data used to create many ArArticles.
   */
  data: Prisma.ArArticleCreateManyInput | Prisma.ArArticleCreateManyInput[]
}

/**
 * ArArticle update
 */
export type ArArticleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * The data needed to update a ArArticle.
   */
  data: Prisma.XOR<Prisma.ArArticleUpdateInput, Prisma.ArArticleUncheckedUpdateInput>
  /**
   * Choose, which ArArticle to update.
   */
  where: Prisma.ArArticleWhereUniqueInput
}

/**
 * ArArticle updateMany
 */
export type ArArticleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ArArticles.
   */
  data: Prisma.XOR<Prisma.ArArticleUpdateManyMutationInput, Prisma.ArArticleUncheckedUpdateManyInput>
  /**
   * Filter which ArArticles to update
   */
  where?: Prisma.ArArticleWhereInput
  /**
   * Limit how many ArArticles to update.
   */
  limit?: number
}

/**
 * ArArticle updateManyAndReturn
 */
export type ArArticleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * The data used to update ArArticles.
   */
  data: Prisma.XOR<Prisma.ArArticleUpdateManyMutationInput, Prisma.ArArticleUncheckedUpdateManyInput>
  /**
   * Filter which ArArticles to update
   */
  where?: Prisma.ArArticleWhereInput
  /**
   * Limit how many ArArticles to update.
   */
  limit?: number
}

/**
 * ArArticle upsert
 */
export type ArArticleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * The filter to search for the ArArticle to update in case it exists.
   */
  where: Prisma.ArArticleWhereUniqueInput
  /**
   * In case the ArArticle found by the `where` argument doesn't exist, create a new ArArticle with this data.
   */
  create: Prisma.XOR<Prisma.ArArticleCreateInput, Prisma.ArArticleUncheckedCreateInput>
  /**
   * In case the ArArticle was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ArArticleUpdateInput, Prisma.ArArticleUncheckedUpdateInput>
}

/**
 * ArArticle delete
 */
export type ArArticleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
  /**
   * Filter which ArArticle to delete.
   */
  where: Prisma.ArArticleWhereUniqueInput
}

/**
 * ArArticle deleteMany
 */
export type ArArticleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ArArticles to delete
   */
  where?: Prisma.ArArticleWhereInput
  /**
   * Limit how many ArArticles to delete.
   */
  limit?: number
}

/**
 * ArArticle without action
 */
export type ArArticleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ArArticle
   */
  select?: Prisma.ArArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ArArticle
   */
  omit?: Prisma.ArArticleOmit<ExtArgs> | null
}
