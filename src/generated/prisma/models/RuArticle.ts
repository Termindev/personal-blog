
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `RuArticle` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RuArticle
 * 
 */
export type RuArticleModel = runtime.Types.Result.DefaultSelection<Prisma.$RuArticlePayload>

export type AggregateRuArticle = {
  _count: RuArticleCountAggregateOutputType | null
  _min: RuArticleMinAggregateOutputType | null
  _max: RuArticleMaxAggregateOutputType | null
}

export type RuArticleMinAggregateOutputType = {
  id: string | null
  title: string | null
  desc: string | null
  content: string | null
  publish_date: Date | null
}

export type RuArticleMaxAggregateOutputType = {
  id: string | null
  title: string | null
  desc: string | null
  content: string | null
  publish_date: Date | null
}

export type RuArticleCountAggregateOutputType = {
  id: number
  title: number
  desc: number
  content: number
  publish_date: number
  _all: number
}


export type RuArticleMinAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
}

export type RuArticleMaxAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
}

export type RuArticleCountAggregateInputType = {
  id?: true
  title?: true
  desc?: true
  content?: true
  publish_date?: true
  _all?: true
}

export type RuArticleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RuArticle to aggregate.
   */
  where?: Prisma.RuArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RuArticles to fetch.
   */
  orderBy?: Prisma.RuArticleOrderByWithRelationInput | Prisma.RuArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RuArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RuArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RuArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RuArticles
  **/
  _count?: true | RuArticleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RuArticleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RuArticleMaxAggregateInputType
}

export type GetRuArticleAggregateType<T extends RuArticleAggregateArgs> = {
      [P in keyof T & keyof AggregateRuArticle]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRuArticle[P]>
    : Prisma.GetScalarType<T[P], AggregateRuArticle[P]>
}




export type RuArticleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RuArticleWhereInput
  orderBy?: Prisma.RuArticleOrderByWithAggregationInput | Prisma.RuArticleOrderByWithAggregationInput[]
  by: Prisma.RuArticleScalarFieldEnum[] | Prisma.RuArticleScalarFieldEnum
  having?: Prisma.RuArticleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RuArticleCountAggregateInputType | true
  _min?: RuArticleMinAggregateInputType
  _max?: RuArticleMaxAggregateInputType
}

export type RuArticleGroupByOutputType = {
  id: string
  title: string
  desc: string
  content: string
  publish_date: Date
  _count: RuArticleCountAggregateOutputType | null
  _min: RuArticleMinAggregateOutputType | null
  _max: RuArticleMaxAggregateOutputType | null
}

type GetRuArticleGroupByPayload<T extends RuArticleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RuArticleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RuArticleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RuArticleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RuArticleGroupByOutputType[P]>
      }
    >
  > 



export type RuArticleWhereInput = {
  AND?: Prisma.RuArticleWhereInput | Prisma.RuArticleWhereInput[]
  OR?: Prisma.RuArticleWhereInput[]
  NOT?: Prisma.RuArticleWhereInput | Prisma.RuArticleWhereInput[]
  id?: Prisma.StringFilter<"RuArticle"> | string
  title?: Prisma.StringFilter<"RuArticle"> | string
  desc?: Prisma.StringFilter<"RuArticle"> | string
  content?: Prisma.StringFilter<"RuArticle"> | string
  publish_date?: Prisma.DateTimeFilter<"RuArticle"> | Date | string
}

export type RuArticleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type RuArticleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RuArticleWhereInput | Prisma.RuArticleWhereInput[]
  OR?: Prisma.RuArticleWhereInput[]
  NOT?: Prisma.RuArticleWhereInput | Prisma.RuArticleWhereInput[]
  title?: Prisma.StringFilter<"RuArticle"> | string
  desc?: Prisma.StringFilter<"RuArticle"> | string
  content?: Prisma.StringFilter<"RuArticle"> | string
  publish_date?: Prisma.DateTimeFilter<"RuArticle"> | Date | string
}, "id">

export type RuArticleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
  _count?: Prisma.RuArticleCountOrderByAggregateInput
  _max?: Prisma.RuArticleMaxOrderByAggregateInput
  _min?: Prisma.RuArticleMinOrderByAggregateInput
}

export type RuArticleScalarWhereWithAggregatesInput = {
  AND?: Prisma.RuArticleScalarWhereWithAggregatesInput | Prisma.RuArticleScalarWhereWithAggregatesInput[]
  OR?: Prisma.RuArticleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RuArticleScalarWhereWithAggregatesInput | Prisma.RuArticleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"RuArticle"> | string
  title?: Prisma.StringWithAggregatesFilter<"RuArticle"> | string
  desc?: Prisma.StringWithAggregatesFilter<"RuArticle"> | string
  content?: Prisma.StringWithAggregatesFilter<"RuArticle"> | string
  publish_date?: Prisma.DateTimeWithAggregatesFilter<"RuArticle"> | Date | string
}

export type RuArticleCreateInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type RuArticleUncheckedCreateInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type RuArticleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RuArticleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RuArticleCreateManyInput = {
  id: string
  title: string
  desc: string
  content: string
  publish_date?: Date | string
}

export type RuArticleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RuArticleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  desc?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  publish_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RuArticleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type RuArticleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}

export type RuArticleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  desc?: Prisma.SortOrder
  content?: Prisma.SortOrder
  publish_date?: Prisma.SortOrder
}



export type RuArticleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["ruArticle"]>

export type RuArticleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["ruArticle"]>

export type RuArticleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}, ExtArgs["result"]["ruArticle"]>

export type RuArticleSelectScalar = {
  id?: boolean
  title?: boolean
  desc?: boolean
  content?: boolean
  publish_date?: boolean
}

export type RuArticleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "desc" | "content" | "publish_date", ExtArgs["result"]["ruArticle"]>

export type $RuArticlePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RuArticle"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    desc: string
    content: string
    publish_date: Date
  }, ExtArgs["result"]["ruArticle"]>
  composites: {}
}

export type RuArticleGetPayload<S extends boolean | null | undefined | RuArticleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RuArticlePayload, S>

export type RuArticleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RuArticleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RuArticleCountAggregateInputType | true
  }

export interface RuArticleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RuArticle'], meta: { name: 'RuArticle' } }
  /**
   * Find zero or one RuArticle that matches the filter.
   * @param {RuArticleFindUniqueArgs} args - Arguments to find a RuArticle
   * @example
   * // Get one RuArticle
   * const ruArticle = await prisma.ruArticle.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RuArticleFindUniqueArgs>(args: Prisma.SelectSubset<T, RuArticleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RuArticleClient<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RuArticle that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RuArticleFindUniqueOrThrowArgs} args - Arguments to find a RuArticle
   * @example
   * // Get one RuArticle
   * const ruArticle = await prisma.ruArticle.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RuArticleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RuArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RuArticleClient<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RuArticle that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuArticleFindFirstArgs} args - Arguments to find a RuArticle
   * @example
   * // Get one RuArticle
   * const ruArticle = await prisma.ruArticle.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RuArticleFindFirstArgs>(args?: Prisma.SelectSubset<T, RuArticleFindFirstArgs<ExtArgs>>): Prisma.Prisma__RuArticleClient<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RuArticle that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuArticleFindFirstOrThrowArgs} args - Arguments to find a RuArticle
   * @example
   * // Get one RuArticle
   * const ruArticle = await prisma.ruArticle.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RuArticleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RuArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RuArticleClient<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RuArticles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuArticleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RuArticles
   * const ruArticles = await prisma.ruArticle.findMany()
   * 
   * // Get first 10 RuArticles
   * const ruArticles = await prisma.ruArticle.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ruArticleWithIdOnly = await prisma.ruArticle.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RuArticleFindManyArgs>(args?: Prisma.SelectSubset<T, RuArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RuArticle.
   * @param {RuArticleCreateArgs} args - Arguments to create a RuArticle.
   * @example
   * // Create one RuArticle
   * const RuArticle = await prisma.ruArticle.create({
   *   data: {
   *     // ... data to create a RuArticle
   *   }
   * })
   * 
   */
  create<T extends RuArticleCreateArgs>(args: Prisma.SelectSubset<T, RuArticleCreateArgs<ExtArgs>>): Prisma.Prisma__RuArticleClient<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RuArticles.
   * @param {RuArticleCreateManyArgs} args - Arguments to create many RuArticles.
   * @example
   * // Create many RuArticles
   * const ruArticle = await prisma.ruArticle.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RuArticleCreateManyArgs>(args?: Prisma.SelectSubset<T, RuArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RuArticles and returns the data saved in the database.
   * @param {RuArticleCreateManyAndReturnArgs} args - Arguments to create many RuArticles.
   * @example
   * // Create many RuArticles
   * const ruArticle = await prisma.ruArticle.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RuArticles and only return the `id`
   * const ruArticleWithIdOnly = await prisma.ruArticle.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RuArticleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RuArticleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RuArticle.
   * @param {RuArticleDeleteArgs} args - Arguments to delete one RuArticle.
   * @example
   * // Delete one RuArticle
   * const RuArticle = await prisma.ruArticle.delete({
   *   where: {
   *     // ... filter to delete one RuArticle
   *   }
   * })
   * 
   */
  delete<T extends RuArticleDeleteArgs>(args: Prisma.SelectSubset<T, RuArticleDeleteArgs<ExtArgs>>): Prisma.Prisma__RuArticleClient<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RuArticle.
   * @param {RuArticleUpdateArgs} args - Arguments to update one RuArticle.
   * @example
   * // Update one RuArticle
   * const ruArticle = await prisma.ruArticle.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RuArticleUpdateArgs>(args: Prisma.SelectSubset<T, RuArticleUpdateArgs<ExtArgs>>): Prisma.Prisma__RuArticleClient<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RuArticles.
   * @param {RuArticleDeleteManyArgs} args - Arguments to filter RuArticles to delete.
   * @example
   * // Delete a few RuArticles
   * const { count } = await prisma.ruArticle.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RuArticleDeleteManyArgs>(args?: Prisma.SelectSubset<T, RuArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RuArticles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuArticleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RuArticles
   * const ruArticle = await prisma.ruArticle.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RuArticleUpdateManyArgs>(args: Prisma.SelectSubset<T, RuArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RuArticles and returns the data updated in the database.
   * @param {RuArticleUpdateManyAndReturnArgs} args - Arguments to update many RuArticles.
   * @example
   * // Update many RuArticles
   * const ruArticle = await prisma.ruArticle.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RuArticles and only return the `id`
   * const ruArticleWithIdOnly = await prisma.ruArticle.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RuArticleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RuArticleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RuArticle.
   * @param {RuArticleUpsertArgs} args - Arguments to update or create a RuArticle.
   * @example
   * // Update or create a RuArticle
   * const ruArticle = await prisma.ruArticle.upsert({
   *   create: {
   *     // ... data to create a RuArticle
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RuArticle we want to update
   *   }
   * })
   */
  upsert<T extends RuArticleUpsertArgs>(args: Prisma.SelectSubset<T, RuArticleUpsertArgs<ExtArgs>>): Prisma.Prisma__RuArticleClient<runtime.Types.Result.GetResult<Prisma.$RuArticlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RuArticles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuArticleCountArgs} args - Arguments to filter RuArticles to count.
   * @example
   * // Count the number of RuArticles
   * const count = await prisma.ruArticle.count({
   *   where: {
   *     // ... the filter for the RuArticles we want to count
   *   }
   * })
  **/
  count<T extends RuArticleCountArgs>(
    args?: Prisma.Subset<T, RuArticleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RuArticleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RuArticle.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RuArticleAggregateArgs>(args: Prisma.Subset<T, RuArticleAggregateArgs>): Prisma.PrismaPromise<GetRuArticleAggregateType<T>>

  /**
   * Group by RuArticle.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuArticleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RuArticleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RuArticleGroupByArgs['orderBy'] }
      : { orderBy?: RuArticleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RuArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRuArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RuArticle model
 */
readonly fields: RuArticleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RuArticle.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RuArticleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RuArticle model
 */
export interface RuArticleFieldRefs {
  readonly id: Prisma.FieldRef<"RuArticle", 'String'>
  readonly title: Prisma.FieldRef<"RuArticle", 'String'>
  readonly desc: Prisma.FieldRef<"RuArticle", 'String'>
  readonly content: Prisma.FieldRef<"RuArticle", 'String'>
  readonly publish_date: Prisma.FieldRef<"RuArticle", 'DateTime'>
}
    

// Custom InputTypes
/**
 * RuArticle findUnique
 */
export type RuArticleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * Filter, which RuArticle to fetch.
   */
  where: Prisma.RuArticleWhereUniqueInput
}

/**
 * RuArticle findUniqueOrThrow
 */
export type RuArticleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * Filter, which RuArticle to fetch.
   */
  where: Prisma.RuArticleWhereUniqueInput
}

/**
 * RuArticle findFirst
 */
export type RuArticleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * Filter, which RuArticle to fetch.
   */
  where?: Prisma.RuArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RuArticles to fetch.
   */
  orderBy?: Prisma.RuArticleOrderByWithRelationInput | Prisma.RuArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RuArticles.
   */
  cursor?: Prisma.RuArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RuArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RuArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RuArticles.
   */
  distinct?: Prisma.RuArticleScalarFieldEnum | Prisma.RuArticleScalarFieldEnum[]
}

/**
 * RuArticle findFirstOrThrow
 */
export type RuArticleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * Filter, which RuArticle to fetch.
   */
  where?: Prisma.RuArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RuArticles to fetch.
   */
  orderBy?: Prisma.RuArticleOrderByWithRelationInput | Prisma.RuArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RuArticles.
   */
  cursor?: Prisma.RuArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RuArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RuArticles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RuArticles.
   */
  distinct?: Prisma.RuArticleScalarFieldEnum | Prisma.RuArticleScalarFieldEnum[]
}

/**
 * RuArticle findMany
 */
export type RuArticleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * Filter, which RuArticles to fetch.
   */
  where?: Prisma.RuArticleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RuArticles to fetch.
   */
  orderBy?: Prisma.RuArticleOrderByWithRelationInput | Prisma.RuArticleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RuArticles.
   */
  cursor?: Prisma.RuArticleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RuArticles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RuArticles.
   */
  skip?: number
  distinct?: Prisma.RuArticleScalarFieldEnum | Prisma.RuArticleScalarFieldEnum[]
}

/**
 * RuArticle create
 */
export type RuArticleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * The data needed to create a RuArticle.
   */
  data: Prisma.XOR<Prisma.RuArticleCreateInput, Prisma.RuArticleUncheckedCreateInput>
}

/**
 * RuArticle createMany
 */
export type RuArticleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RuArticles.
   */
  data: Prisma.RuArticleCreateManyInput | Prisma.RuArticleCreateManyInput[]
}

/**
 * RuArticle createManyAndReturn
 */
export type RuArticleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * The data used to create many RuArticles.
   */
  data: Prisma.RuArticleCreateManyInput | Prisma.RuArticleCreateManyInput[]
}

/**
 * RuArticle update
 */
export type RuArticleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * The data needed to update a RuArticle.
   */
  data: Prisma.XOR<Prisma.RuArticleUpdateInput, Prisma.RuArticleUncheckedUpdateInput>
  /**
   * Choose, which RuArticle to update.
   */
  where: Prisma.RuArticleWhereUniqueInput
}

/**
 * RuArticle updateMany
 */
export type RuArticleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RuArticles.
   */
  data: Prisma.XOR<Prisma.RuArticleUpdateManyMutationInput, Prisma.RuArticleUncheckedUpdateManyInput>
  /**
   * Filter which RuArticles to update
   */
  where?: Prisma.RuArticleWhereInput
  /**
   * Limit how many RuArticles to update.
   */
  limit?: number
}

/**
 * RuArticle updateManyAndReturn
 */
export type RuArticleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * The data used to update RuArticles.
   */
  data: Prisma.XOR<Prisma.RuArticleUpdateManyMutationInput, Prisma.RuArticleUncheckedUpdateManyInput>
  /**
   * Filter which RuArticles to update
   */
  where?: Prisma.RuArticleWhereInput
  /**
   * Limit how many RuArticles to update.
   */
  limit?: number
}

/**
 * RuArticle upsert
 */
export type RuArticleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * The filter to search for the RuArticle to update in case it exists.
   */
  where: Prisma.RuArticleWhereUniqueInput
  /**
   * In case the RuArticle found by the `where` argument doesn't exist, create a new RuArticle with this data.
   */
  create: Prisma.XOR<Prisma.RuArticleCreateInput, Prisma.RuArticleUncheckedCreateInput>
  /**
   * In case the RuArticle was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RuArticleUpdateInput, Prisma.RuArticleUncheckedUpdateInput>
}

/**
 * RuArticle delete
 */
export type RuArticleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
  /**
   * Filter which RuArticle to delete.
   */
  where: Prisma.RuArticleWhereUniqueInput
}

/**
 * RuArticle deleteMany
 */
export type RuArticleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RuArticles to delete
   */
  where?: Prisma.RuArticleWhereInput
  /**
   * Limit how many RuArticles to delete.
   */
  limit?: number
}

/**
 * RuArticle without action
 */
export type RuArticleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RuArticle
   */
  select?: Prisma.RuArticleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RuArticle
   */
  omit?: Prisma.RuArticleOmit<ExtArgs> | null
}
